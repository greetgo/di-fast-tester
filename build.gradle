buildscript {
  ext {
    springBootVersion = '2.1.0.RELEASE'
  }
  repositories {
    mavenLocal()
    if (System.getenv('GG_REPO')?.trim()) maven { url System.getenv('GG_REPO') }
    mavenCentral()
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
  }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

version = '0.0.1'

repositories {
  mavenLocal()
  if (System.getenv('GG_REPO')?.trim()) maven { url System.getenv('GG_REPO') }
  mavenCentral()
}

dependencies {
  ext.testNgVersion = '6.14.3'
  ext.depinjectVersion = '2.1.7'

  implementation('org.springframework.boot:spring-boot-starter')
  testImplementation('org.springframework.boot:spring-boot-starter-test')

  compile "kz.greetgo.depinject:greetgo.depinject:$depinjectVersion"
  compile "kz.greetgo.depinject:greetgo.depinject.gen:$depinjectVersion"

  testCompile "org.testng:testng:$testNgVersion"
  testCompile 'org.easytesting:fest-assert-core:2.0M10'
}

test.useTestNG()

idea.module.downloadSources = true
idea.module.downloadJavadoc = true
idea.module.inheritOutputDirs = false
idea.module.outputDir = file("$buildDir/classes/main/")
idea.module.testOutputDir = file("$buildDir/classes/test/")

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
[compileJava, compileTestJava]*.options*.debugOptions*.debugLevel = "source,lines,vars"

sourceSets.main.java.srcDirs = ["src"]
sourceSets.test.java.srcDirs = ["test_src"]
sourceSets.main.resources.srcDirs = ["src_resources"]
sourceSets.test.resources.srcDirs = ["test_resources"]

sourceSets.main.resources {
  srcDirs += sourceSets.main.java.srcDirs
  exclude '**/*.java'
}
sourceSets.test.resources {
  srcDirs += sourceSets.test.java.srcDirs
  exclude '**/*.java'
}

jar {
  manifest {
    attributes 'Implementation-Title': project.name
    attributes 'Implementation-Version': version
    attributes 'Implementation-Vendor': "greetgo!"
    attributes 'Created-By': System.getProperty("user.name")
    attributes 'Created-At': new Date().format("yyyy-MM-dd/HH:mm:ss")
  }
}

task runDepinjectApplication(type: JavaExec) {
  group = "run"
  main = "kz.greetgo.di_fast.depinject.app.DepinjectApplication"
  classpath = sourceSets.main.runtimeClasspath
}

task runSpringApplication(type: JavaExec) {
  group = "run"
  main = "kz.greetgo.di_fast.spring.app.DiFastApplication"
  classpath = sourceSets.main.runtimeClasspath
}

task runDepinjectClassesGenerator(type: JavaExec) {
  group = "run"
  main = "kz.greetgo.di_fast.depinject.generator.GenerateDepinjectClassesLauncher"
  classpath = sourceSets.main.runtimeClasspath
}
task runSpringClassesGenerator(type: JavaExec) {
  group = "run"
  main = "kz.greetgo.di_fast.spring.generator.GenerateClassesLauncher"
  classpath = sourceSets.main.runtimeClasspath
}
